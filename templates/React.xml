<templateSet group="React">
  <template name="arrayreducer" value="function $ENTITY_LOWER$Reducer(state, action) {&#10;    if (('undefined' == typeof state) || (null == state)) {&#10;        return { isFetching: false, valid: false, updatedAt: null, items: [] };&#10;    }&#10;&#10;    if ('INIT' == action.type) {&#10;        if (localStorage.$ENTITY_LOWER$) {&#10;            return Object.assign({}, state, JSON.parse(localStorage.$ENTITY_LOWER$));&#10;        }&#10;    }&#10;&#10;    const $ENTITY_LOWER_SINGULAR$ = new normalizr.Schema('$ENTITY_LOWER$');&#10;&#10;    let data = null;&#10;&#10;    switch (action.type) {&#10;        case $ACTION$_REQUEST:&#10;            state = $.extend(true, {}, state, {&#10;                isFetching: true&#10;            });&#10;            break;&#10;        case $ACTION$_RECIEVE:&#10;            data = normalizer.normalize(action.payload, normalizr.arrayOf($ENTITY_LOWER_SINGULAR$));&#10;            state = $.extend(true, {}, state, {&#10;                isFetching: false,&#10;                valid: true,&#10;                updatedAt: moment(),&#10;                items: data.result&#10;            });&#10;            break;&#10;        case $ACTION$_ERROR:&#10;            state = $.extend(true, {}, state, {&#10;                isFetching: false&#10;            });&#10;            break;&#10;        case $ACTION$_INVALIDATE:&#10;            state = $.extend(true, {}, state, {&#10;                valid: false&#10;            });&#10;            break;&#10;    }&#10;&#10;    localStorage.setItem('$ENTITY_LOWER$', JSON.stringify(state));&#10;&#10;    return state;&#10;}" description="Array reducer" toReformat="false" toShortenFQNames="true">
    <variable name="ENTITY_LOWER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_LOWER_SINGULAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>